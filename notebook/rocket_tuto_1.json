{
    "states_variables" : ["pos_x", "pos_y", "acceleration_x", "acceleration_y", "speed_x", "speed_y", "angle"],
    "agent_variables" : ["booster"],
    "initial_values" : {
      "pos_x" : [100.0],
      "pos_y" : [175.0],
      "acceleration_x": [0.0],
      "acceleration_y": [0.0],
      "speed_x": [0.0],
      "speed_y": [0.0],
      "angle" : [0.0],
      "booster" : [0.0],
      "alpha" : [0.0],
      "futur_pos_x" : [100.0],
      "futur_pos_y" : [175.0],
      "m_fuel" : [100],
      "weight_rocket" : [105],
      "weight_dry_rocket" : [5],
      "G" : [1.62],
      "m_fuel_ini" : [100.0],
      "pos_y_star": [0.0],
      "pos_x_star": [120.0]
      },
    "_limit" : ["min", "max", "n_bins"],
    "limit" : {
      "pos_x" : [0.0, 300, 61],
      "pos_y" : [0.0, 300.0, 61],
      "acceleration_x": [-20.0, 20.0, 21],
      "acceleration_y": [-20.0, 20.0, 21],
      "speed_x": [-50.0, 50.0, 21],
      "speed_y": [-50.0, 50.0, 21],
      "angle" : [-0.8, 0.8, 17],
      "booster" : [0.0, 1.0, 3],
      "alpha" : [-0.1, 0.1, 3],
      "m_fuel" : [0.0, 100, 101]
    },
    "n_action" : {
      "booster": {"0" : 0.0, "1" : 0.5, "2" : 1.0}
    },
    "_action_to_take" : "How action change agent_variables, value is taken from n_action dictionary",
    "action_to_take" : {
      "booster": {"$booster$" : "$action$"}
    },
    "_equations" : "compute values for each equation. Variable are updated after the loop",
    "equations_variables": {
        "$F$" : "600",
        "$m_fuel$" : "$m_fuel$ - $booster$ *10 -$angle$ *10",
        "$weight_rocket$" : "$weight_dry_rocket$ + $m_fuel$",
        "dt" : "0.5",
        "$theta$" : "0.0",
        "$x_0$" : "$pos_x$",
        "$y_0$" : "$pos_y$",
        "$Vx_0$" : "$speed_x$",
        "$Vy_0$" : "$speed_y$",
        "$angle$" : "$theta$ + $alpha$",
        "$acceleration_x$" : "($F$/(5+$weight_rocket$) * np.sin($angle$)) * $booster$",
        "$acceleration_y$" : "($F$/(5+$weight_rocket$) * np.cos($angle$)) * $booster$ - $G$",
        "$speed_x$" : "($F$/(5+$weight_rocket$) * np.sin($angle$)) * $booster$ * $dt$ + $Vx_0$",
        "$speed_y$" : "($F$/(5+$weight_rocket$) * np.cos($angle$)) * $booster$ * $dt$ - $G$ * $dt$ + $Vy_0$",
        "$pos_x$": "(0.5 * $F$/(5+$weight_rocket$) * np.sin($angle$)) * $booster$ * $dt$**2 + $Vx_0$ * $dt$ + $x_0$",
        "$pos_y$": "(0.5 * $F$/(5+$weight_rocket$) * np.cos($angle$)) * $booster$ * $dt$**2 - $G$ * $dt$**2 + $Vy_0$ * $dt$ + $y_0$",
        "$futur_pos_y$" : "$pos_y$ + 3 * $speed_y$",
        "$futur_pos_x$" : "$pos_x$ + 3 * $speed_x$"
    },
    "equations_rewards": {
      "$booster$" : "-($pos_y$ - $pos_y_star$)**2 + $m_fuel$/$m_fuel_ini$"
    },
    "_stop_episode" : "stop episode when goal is reach.", 
    "_stop_episode_info1" : "If feature has 1 value, its feature's value must be equal", 
    "_stop_episode_info2" : "if feature has 2 values [min_limit, max_limit]. Criterion is bounded feature >= min_limit and feature <= max_limit",
    "stop_episode" : {
      "pos_y" : [1, 0],
      "acceleration_y" : [-2,2],
      "speed_y" : [-2,2]
  }
}